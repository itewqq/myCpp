/*
emmm这个题我这个写法其实并不是解，因为我写的实在是太暴力了
这个题重要的一点是，如何判定一个点是不是可以作为开头，这里我一开始觉得需要判断从他开始往后的整个序列是否能满足要求
但是后来看了题解发现有一个性质可以决定，那就是先目光短浅一点，只考虑从一个点往后s个点这一段，看这个点是否能满足，如果能的话就打上标记
这样的话，每次判断一个点是否全局满足要求，就只需要从这个点开始对往后的每隔s个点这个自序列判断一下就行了，如果这条路上所有的点都是满足的，那么整个就是满足的
所以这样的话就可以预处理出来所有的点往后s个这一段判断是否能满足要求，然后判断的时候每次只是判断一个间隔为s的序列是不是全满足就好了
预处理的时候用滑动窗口，+1 -1的事情。。。判断num是否为0即可
*/
//#include<bits/stdc++.h>
#include <iostream>
#include <cstdio>
#include <cstring>
#include<map>
#include<vector>
#include<set>
#include<string>
#include<cctype>
#include<algorithm>
#include<cmath>


using namespace std;
typedef long long LL;
const int maxn=1e5+5;
const int MOD=1e9+7;

int T,s,n,ori[maxn],close[maxn],pre[maxn],mc,pos;
int cnt[maxn];
int check(int st)
{
    int m=(n-st+1)/s;
    int last=(n-st+1)%s;
    //cout<<m<<" "<<last<<endl;
    for(int i=0;i<m;i++)
    {
        int p=st+i*s;
        //fill(cnt+1,cnt+1+s+1,0);
        memset(cnt,0,4*(s+2));
        for(int j=0;j<s;j++)
        {
            cnt[ori[j+p]]++;
            if(cnt[ori[j+p]]>1)return 0;
        }
    }
    int tp=st+m*s;
    //cout<<"tp "<<tp<<endl;
    //fill(cnt+1,cnt+1+s+1,0);
    memset(cnt,0,4*(s+2));
    for(int i=0;i<last;i++)
    {
        int p=i+tp;
        cnt[ori[p]]++;

        if(cnt[ori[p]]>1)return 0;
    }

    m=(st-1)/s;
    last=(st-1)%s;
    //cout<<m<<" "<<last<<endl;
    for(int i=0;i<m;i++)
    {
        int p=st-1-i*s;
        //fill(cnt+1,cnt+1+s+1,0);
        memset(cnt,0,4*(s+2));
        for(int j=0;j<s;j++)
        {
            cnt[ori[p-j]]++;
            if(cnt[ori[p-j]]>1)return 0;
        }
    }
    tp=st-1-m*s;
    //cout<<"tp "<<tp<<endl;
    //fill(cnt+1,cnt+1+s+1,0);
    memset(cnt,0,4*(s+2));
    for(int i=0;i<last;i++)
    {
        int p=tp-i;
        cnt[ori[p]]++;
        //cout<<p<<" "<<ori[p]<<" "<<cnt[ori[p]]<<endl;
        if(cnt[ori[p]]>1)return 0;
    }
    return 1;
}

int main()
{
    //freopen("1.txt","w",stdout);
    scanf("%d",&T);
    while(T--)
    {
        int ans=0,c=-1;
        memset(close,-1,sizeof(close));
        memset(pre,-1,sizeof(pre));
        mc=1<<29;
        pos=-1;
        scanf("%d%d",&s,&n);
        for(int i=1;i<=n;i++)
        {
            scanf("%d",&ori[i]);
        }
        for(int i=1;i<=s;i++)
            close[i]=1<<29;
        for(int i=1;i<=n;i++)
        {
            if(pre[ori[i]]!=-1)
            {
                close[ori[i]]=min(close[ori[i]],i-pre[ori[i]]);
            }
            pre[ori[i]]=i;
            if(mc>close[ori[i]])
            {
                mc=close[ori[i]];
                pos=i;
                c=ori[i];
            }
            //cout<<i<<" "<<close[ori[i]]<<" "<<mc<<endl;
        }
        //cout<<pos<<" "<<c<<endl;
        if(s>=n&&pos==-1)
        {
            //if(pos==-1)
                printf("%d\n",s);
            //else
                //printf("0\n");
            continue;
        }
        if(check(pos))
            ans++;
        for(int i=pos-1;i>0&&ori[i]!=c;i--)
        {
            if(check(i))
                ans++;
        }
        printf("%d\n",ans);
    }
    return 0;
}
/*
100
5 5
4 2 1 3 2
*/

