//poj1062
//又是猜一个临界点！之前的最大值最小化也是。。有时候暴力想法总能意想不到，在无计可施而题目中有某种约束的时候不妨都试试这种操作
//#include<bits/stdc++.h>
#include<iostream>
#include<cmath>
#include<cstdio>
#include<cstring>
#include<vector>
#include<string>
#include<set>
#include<map>
#include<queue>

using namespace std;
typedef long long ll;
const int INF = 1<<29;
const int maxn = 100 + 5;
//int dx[4]= {0,1,0,-1};
//int dy[4]= {1,0,-1,0};

struct Edge
{
    int from,to,dist;
    Edge(int u,int v,int d):from(u),to(v),dist(d) {}
};
struct Node
{
    int u,dist;
    Node(int u,int dist):u(u),dist(dist) {}
    bool operator<(const Node &rhs)const
    {
        return dist>rhs.dist;
    }
};
typedef struct Node Node;
typedef struct Edge Edge;
vector<Edge> edges;
vector<int> G[maxn+1];
int GL[maxn+1];
int GW[maxn+1];
int dist[maxn+1];
char done[maxn+1];

void addedge(int from,int to,int dist)
{
    int m;
    edges.push_back(Edge(from,to,dist));
    m=edges.size();
    G[from].push_back(m-1);
}

int main()
{

    int M,N,P,L,X,T,V,lb,ub,ans;
    scanf("%d%d",&M,&N);
    for(int i=1; i<=N; ++i)
    {
        scanf("%d%d%d",&P,&L,&X);
        addedge(maxn,i,P);
        GL[i]=L;
        for(int j=1; j<=X; j++) 
        {
            scanf("%d%d",&T,&V);
            addedge(T,i,V);
        }
    }
    ans=edges[0].dist;
    //dij
    for(lb=max(GL[1]-M,1); lb<=GL[1]; lb++)//枚举
    {
        ub=min(lb+M,maxn);
        priority_queue<Node> Q;
        for(int i=1; i<=N; i++)
            dist[i]=INF;
        dist[maxn]=0;
        memset(done,0,sizeof(done));
        Q.push(Node(maxn,0));
        while(!Q.empty())
        {
            Node cur=Q.top();
            Q.pop();
            int u=cur.u;
            if(done[u])continue;
            done[u]=1;
            for(int i=0; i<G[u].size(); i++)
            {
                Edge e=edges[G[u][i]];
                if(GL[e.to]>=lb&&GL[e.to]<=ub&&dist[u]+e.dist<dist[e.to])
                {
                    dist[e.to]=dist[u]+e.dist;
                    Q.push(Node(e.to,dist[e.to]));
                }
            }
        }
        ans=min(ans,dist[1]);
    }
    cout<<ans<<endl;

    return 0;
}
/*
1 4
10000 3 2
2 1
3 3
1000 2 2
4 1
3 1
1000 3 1
4 2
100 4 0

105
*/
